// <auto-generated />
using System;
using DataLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240319105558_Address")]
    partial class Address
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ModelsLibrary.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3248),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3303),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3307),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId3",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3310),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId4",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3313),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId5",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3316),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId6",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3319),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId7",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3321),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId8",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3324),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId9",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3327),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId10",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3330),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId11",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            PaymentDate = new DateTime(2024, 4, 30, 3, 55, 58, 135, DateTimeKind.Local).AddTicks(3332),
                            PaymentIntentId = "TestPaymentIntentId",
                            PaymentStatus = 0,
                            SessionId = "SessionId12",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ModelsLibrary.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ModelsLibrary.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("shoppingCartItems");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Saint Patrick",
                            Name = "Target"
                        });
                });

            modelBuilder.Entity("ModelsLibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResetPasswordExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bulevar Evrope",
                            Email = "user1@gmail.com",
                            Name = "User1Name",
                            Password = "AQAAAAIAAYagAAAAELQKZC7R2WQxHd1uo0g3xQ2YiBvZtuglIUcqhsekqrBVG8u6+gUBNaXjTerGZoIUwQ==",
                            ResetPasswordExpire = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = 0
                        });
                });

            modelBuilder.Entity("StoreUser", b =>
                {
                    b.Property<int>("SellersId")
                        .HasColumnType("int");

                    b.Property<int>("StoresId")
                        .HasColumnType("int");

                    b.HasKey("SellersId", "StoresId");

                    b.HasIndex("StoresId");

                    b.ToTable("StoreUser");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Order", b =>
                {
                    b.HasOne("ModelsLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Product", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Product_Store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ModelsLibrary.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("ModelsLibrary.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("ModelsLibrary.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Store", b =>
                {
                    b.HasOne("ModelsLibrary.Models.User", "User")
                        .WithMany("OwnedStores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreUser", b =>
                {
                    b.HasOne("ModelsLibrary.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SellersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelsLibrary.Models.Store", null)
                        .WithMany()
                        .HasForeignKey("StoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelsLibrary.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ModelsLibrary.Models.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ModelsLibrary.Models.User", b =>
                {
                    b.Navigation("OwnedStores");
                });
#pragma warning restore 612, 618
        }
    }
}
